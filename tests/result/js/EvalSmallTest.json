{
  "abstract-equality2.js" : true,
  "abstract-equality3.js" : true,
  "abstract-equality4.js" : true,
  "abstract-equality5.js" : true,
  "addition1.js" : true,
  "addition2.js" : true,
  "addition3.js" : true,
  "addition4.js" : true,
  "addition5.js" : true,
  "addition6.js" : true,
  "arguments1.js" : true,
  "arguments2.js" : true,
  "array1.js" : true,
  "array2.js" : true,
  "array3.js" : true,
  "array4.js" : true,
  "array5.js" : true,
  "array6.js" : true,
  "assign-object.js" : true,
  "assign-object2.js" : true,
  "assign-object3.js" : true,
  "assign-object4.js" : true,
  "assign-object5.js" : true,
  "assign-object6.js" : true,
  "assignment1.js" : true,
  "async-generator1.js" : "[YET] Assert: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.",
  "async1.js" : true,
  "await1.js" : "[YET] Set the code evaluation state of _asyncContext_ such that when evaluation is resumed with a Completion _completion_, the following steps of the algorithm that invoked Await will be performed, with _completion_ available.",
  "await2.js" : "[YET] If _uninitializedBoundNames_ is not an empty List, then\n  1. Assert: _uninitializedBoundNames_ is not duplicate entries.\n  1. Let _newEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n  1. For each String _name_ of _uninitializedBoundNames_, do\n    1. Perform ! _newEnv_.CreateMutableBinding(_name_, *false*).\n  1. Set the running execution context.LexicalEnvironment to _newEnv_.",
  "bind1.js" : false,
  "block1.js" : "[YET] Perform ! _env_.CreateMutableBinding(_dn_, *false*). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"></emu-xref>.",
  "boolean1.js" : true,
  "boolean2.js" : true,
  "boolean3.js" : true,
  "boolean4.js" : true,
  "class-decl1.js" : "[YET] If |ClassBody?| is present, then\n  1. [YET] For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody?|, do\n    1. [YET] If _classPrivateEnvironment_.[[Names]] contains a Private Name whose [[Description]] is _dn_, then\n      1. [YET] Assert: This is only possible for getter/setter pairs.\n    1. [YET] Else,\n      1. [YET] Let _name_ be a new Private Name whose [[Description]] value is _dn_.\n      1. Append _name_ to _classPrivateEnvironment_.[[Names]].",
  "class-decl2.js" : "[YET] If |ClassBody?| is present, then\n  1. [YET] For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody?|, do\n    1. [YET] If _classPrivateEnvironment_.[[Names]] contains a Private Name whose [[Description]] is _dn_, then\n      1. [YET] Assert: This is only possible for getter/setter pairs.\n    1. [YET] Else,\n      1. [YET] Let _name_ be a new Private Name whose [[Description]] value is _dn_.\n      1. Append _name_ to _classPrivateEnvironment_.[[Names]].",
  "compare1.js" : "[YET] Let _k_ be the smallest non-negative integer such that the code unit at index _k_ within _px_ is different from the code unit at index _k_ within _py_. (There must be such a _k_, for neither String is a prefix of the other.)",
  "complement1.js" : "[YET] Return the result of applying bitwise complement to _oldValue_. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.",
  "constructor1.js" : true,
  "delete1.js" : "[YET] If _N_ is an element of _varNames_, remove that element from the _varNames_.",
  "empty-statement.js" : true,
  "equality1.js" : true,
  "expression-statement1.js" : true,
  "for1.js" : "[YET] If _perIterationBindings_ has any elements, then\n  1. Let _lastIterationEnv_ be the running execution context.LexicalEnvironment.\n  1. Let _outer_ be _lastIterationEnv_.[[OuterEnv]].\n  1. Assert: _outer_ is not *null*.\n  1. Let _thisIterationEnv_ be NewDeclarativeEnvironment(_outer_).\n  1. For each _bn_ of _perIterationBindings_, do\n    1. Perform ! _thisIterationEnv_.CreateMutableBinding(_bn_, *false*).\n    1. Let _lastValue_ be ? _lastIterationEnv_.GetBindingValue(_bn_, *true*).\n    1. Perform _thisIterationEnv_.InitializeBinding(_bn_, _lastValue_).\n  1. Set the running execution context.LexicalEnvironment to _thisIterationEnv_.",
  "for2.js" : "[YET] If _perIterationBindings_ has any elements, then\n  1. Let _lastIterationEnv_ be the running execution context.LexicalEnvironment.\n  1. Let _outer_ be _lastIterationEnv_.[[OuterEnv]].\n  1. Assert: _outer_ is not *null*.\n  1. Let _thisIterationEnv_ be NewDeclarativeEnvironment(_outer_).\n  1. For each _bn_ of _perIterationBindings_, do\n    1. Perform ! _thisIterationEnv_.CreateMutableBinding(_bn_, *false*).\n    1. Let _lastValue_ be ? _lastIterationEnv_.GetBindingValue(_bn_, *true*).\n    1. Perform _thisIterationEnv_.InitializeBinding(_bn_, _lastValue_).\n  1. Set the running execution context.LexicalEnvironment to _thisIterationEnv_.",
  "forin1.js" : "[YET] If _uninitializedBoundNames_ is not an empty List, then\n  1. Assert: _uninitializedBoundNames_ is not duplicate entries.\n  1. Let _newEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n  1. For each String _name_ of _uninitializedBoundNames_, do\n    1. Perform ! _newEnv_.CreateMutableBinding(_name_, *false*).\n  1. Set the running execution context.LexicalEnvironment to _newEnv_.",
  "forof1.js" : "[YET] If _uninitializedBoundNames_ is not an empty List, then\n  1. Assert: _uninitializedBoundNames_ is not duplicate entries.\n  1. Let _newEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n  1. For each String _name_ of _uninitializedBoundNames_, do\n    1. Perform ! _newEnv_.CreateMutableBinding(_name_, *false*).\n  1. Set the running execution context.LexicalEnvironment to _newEnv_.",
  "function-application1.js" : true,
  "function-application2.js" : true,
  "function-application3.js" : true,
  "function-application4.js" : true,
  "function-application5.js" : true,
  "function-declare1.js" : true,
  "function1.js" : "[YET] If Type(_func_) is Object and _func_ has a [[SourceText]] internal slot and _func_.[[SourceText]] is a sequence of Unicode code points and ! HostHasSourceTextAvailable(_func_) is *true*, then\n  1. Return ! CodePointsToString(_func_.[[SourceText]]).",
  "function2.js" : "[YET] If Type(_func_) is Object and _func_ has a [[SourceText]] internal slot and _func_.[[SourceText]] is a sequence of Unicode code points and ! HostHasSourceTextAvailable(_func_) is *true*, then\n  1. Return ! CodePointsToString(_func_.[[SourceText]]).",
  "function3.js" : true,
  "generator1.js" : true,
  "generator2.js" : true,
  "global-eval.js" : false,
  "global-object.js" : true,
  "global-object2.js" : true,
  "global.js" : true,
  "harness.js" : true,
  "if-statement1.js" : true,
  "increment1.js" : true,
  "increment2.js" : true,
  "instanceof1.js" : true,
  "instanceof2.js" : true,
  "multiple-statements.js" : true,
  "number1.js" : true,
  "number2.js" : true,
  "number3.js" : true,
  "number4.js" : true,
  "object1.js" : true,
  "object2.js" : "[YET] For each own property key _P_ of _O_ such that _P_ is an array index, in ascending numeric index order, do\n  1. Append _P_ to _keys_.",
  "promise1.js" : true,
  "read-property1.js" : true,
  "semicolon-insertion1.js" : true,
  "semicolon-insertion2.js" : true,
  "semicolon-insertion3.js" : true,
  "set1.js" : true,
  "shift1.js" : true,
  "string1.js" : true,
  "string2.js" : true,
  "string3.js" : true,
  "switch1.js" : true,
  "symbol1.js" : true,
  "symbol2.js" : true,
  "symbol3.js" : true,
  "template1.js" : false,
  "template2.js" : false,
  "try1.js" : true,
  "try2.js" : true,
  "typeof1.js" : true,
  "variable-declare1.js" : true,
  "variable-declare2.js" : true,
  "variable-declare3.js" : true,
  "variable-declare4.js" : true
}

{
  "abstract-equality2.js" : "[YET] Return the result of negating _x_; that is, compute a Number with the same magnitude but opposite sign.",
  "abstract-equality3.js" : true,
  "abstract-equality4.js" : false,
  "abstract-equality5.js" : "[YET] If _x_ and _y_ are exactly the same sequence of code units (same length and same code units at corresponding indices), return *true*; otherwise, return *false*.",
  "addition1.js" : true,
  "addition2.js" : true,
  "addition3.js" : true,
  "addition4.js" : "[YET] If _argument_ is an Array exotic object, return *true*.",
  "addition5.js" : true,
  "addition6.js" : false,
  "arguments1.js" : true,
  "arguments2.js" : false,
  "array1.js" : true,
  "array2.js" : "[YET] Assert: _oldLen_ is a non-negative integral Number.",
  "array3.js" : "[YET] Assert: _oldLen_ is a non-negative integral Number.",
  "array4.js" : "[YET] Assert: _oldLen_ is a non-negative integral Number.",
  "array5.js" : "[YET] Assert: The current execution context will not subsequently be used for the evaluation of any ECMAScript code or built-in functions. The invocation of Call subsequent to the invocation of this abstract operation will create and push a new execution context before performing any such evaluation.",
  "array6.js" : "[YET] Assert: _Receiver_ does not currently have a property _P_.",
  "assign-object.js" : true,
  "assign-object2.js" : "[YET] Assert: _Receiver_ does not currently have a property _P_.",
  "assign-object3.js" : "[YET] If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n  1. Let _isProtoSetter_ be *false*.",
  "assign-object4.js" : "[YET] If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n  1. Let _isProtoSetter_ be *false*.",
  "assign-object5.js" : "[YET] If |BooleanLiteral| is the token `false`, return *false*.",
  "assign-object6.js" : "[YET] If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n  1. Let _isProtoSetter_ be *false*.",
  "assignment1.js" : "[YET] Let _opText_ be the sequence of Unicode code points associated with _assignmentOpText_ in the following table:\n  <figure>\n    <!-- emu-format ignore -->\n    <table class=\"lightweight-table\">\n    <tbody><tr><th> _assignmentOpText_ </th><th> _opText_       </th></tr>\n    <tr><td> `**=`              </td><td> `**`           </td></tr>\n    <tr><td> `*=`               </td><td> `*`            </td></tr>\n    <tr><td> `/=`               </td><td> `/`            </td></tr>\n    <tr><td> `%=`               </td><td> `%`            </td></tr>\n    <tr><td> `+=`               </td><td> `+`            </td></tr>\n    <tr><td> `-=`               </td><td> `-`            </td></tr>\n    <tr><td> `<<=`        </td><td> `<<`     </td></tr>\n    <tr><td> `>>=`        </td><td> `>>`     </td></tr>\n    <tr><td> `>>>=`    </td><td> `>>>` </td></tr>\n    <tr><td> `&=`           </td><td> `&`        </td></tr>\n    <tr><td> `^=`               </td><td> `^`            </td></tr>\n    <tr><td> `|=`               </td><td> `|`            </td></tr>\n    </tbody></table>\n  </figure>",
  "async-generator1.js" : "[YET] Assert: _intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.",
  "async1.js" : "[YET] Let _internalSlotsList_ be a List containing the names of all the internal slots that <emu-xref href=\"#sec-built-in-function-objects\"></emu-xref> requires for the built-in function object that is about to be created.",
  "await1.js" : "[YET] Let _internalSlotsList_ be a List containing the names of all the internal slots that <emu-xref href=\"#sec-built-in-function-objects\"></emu-xref> requires for the built-in function object that is about to be created.",
  "await2.js" : "[YET] Assert: _intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.",
  "bind1.js" : false,
  "block1.js" : "[YET] Perform ! _env_.CreateMutableBinding(_dn_, *false*). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"></emu-xref>.",
  "boolean1.js" : "[YET] If |BooleanLiteral| is the token `false`, return *false*.",
  "boolean2.js" : "[YET] If |BooleanLiteral| is the token `false`, return *false*.",
  "boolean3.js" : "[YET] If |BooleanLiteral| is the token `false`, return *false*.",
  "boolean4.js" : "[YET] Let _result_ be the Completion Record that is the result of evaluating _F_ in a manner that conforms to the specification of _F_. The *this* value is uninitialized, _argumentsList_ provides the named parameters, and _newTarget_ provides the NewTarget value.",
  "class-decl1.js" : "[YET] If |ClassBody?| is present, then\n  1. [YET] For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody?|, do\n    1. [YET] If _classPrivateEnvironment_.[[Names]] contains a Private Name whose [[Description]] is _dn_, then\n      1. [YET] Assert: This is only possible for getter/setter pairs.\n    1. [YET] Else,\n      1. [YET] Let _name_ be a new Private Name whose [[Description]] value is _dn_.\n      1. Append _name_ to _classPrivateEnvironment_.[[Names]].",
  "class-decl2.js" : "[YET] If |ClassBody?| is present, then\n  1. [YET] For each String _dn_ of the PrivateBoundIdentifiers of |ClassBody?|, do\n    1. [YET] If _classPrivateEnvironment_.[[Names]] contains a Private Name whose [[Description]] is _dn_, then\n      1. [YET] Assert: This is only possible for getter/setter pairs.\n    1. [YET] Else,\n      1. [YET] Let _name_ be a new Private Name whose [[Description]] value is _dn_.\n      1. Append _name_ to _classPrivateEnvironment_.[[Names]].",
  "compare1.js" : "[YET] Let _k_ be the smallest non-negative integer such that the code unit at index _k_ within _px_ is different from the code unit at index _k_ within _py_. (There must be such a _k_, for neither String is a prefix of the other.)",
  "complement1.js" : "[YET] Return the result of applying bitwise complement to _oldValue_. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.",
  "constructor1.js" : false,
  "delete1.js" : "[YET] Remove the own property with name _P_ from _O_.",
  "empty-statement.js" : true,
  "equality1.js" : true,
  "expression-statement1.js" : true,
  "for1.js" : false,
  "for2.js" : "[YET] If _perIterationBindings_ has any elements, then\n  1. Let _lastIterationEnv_ be the running execution context.LexicalEnvironment.\n  1. Let _outer_ be _lastIterationEnv_.[[OuterEnv]].\n  1. Assert: _outer_ is not *null*.\n  1. Let _thisIterationEnv_ be NewDeclarativeEnvironment(_outer_).\n  1. For each _bn_ of _perIterationBindings_, do\n    1. Perform ! _thisIterationEnv_.CreateMutableBinding(_bn_, *false*).\n    1. Let _lastValue_ be ? _lastIterationEnv_.GetBindingValue(_bn_, *true*).\n    1. Perform _thisIterationEnv_.InitializeBinding(_bn_, _lastValue_).\n  1. Set the running execution context.LexicalEnvironment to _thisIterationEnv_.",
  "forin1.js" : "[YET] If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n  1. Let _isProtoSetter_ be *false*.",
  "forof1.js" : "[YET] If _uninitializedBoundNames_ is not an empty List, then\n  1. Assert: _uninitializedBoundNames_ is not duplicate entries.\n  1. Let _newEnv_ be NewDeclarativeEnvironment(_oldEnv_).\n  1. For each String _name_ of _uninitializedBoundNames_, do\n    1. Perform ! _newEnv_.CreateMutableBinding(_name_, *false*).\n  1. Set the running execution context.LexicalEnvironment to _newEnv_.",
  "function-application1.js" : true,
  "function-application2.js" : true,
  "function-application3.js" : false,
  "function-application4.js" : true,
  "function-application5.js" : "[YET] If _envRec_ does not have a binding for _N_, then\n  1. If _S_ is *true*, throw a *ReferenceError* exception.\n  1. Perform _envRec_.CreateMutableBinding(_N_, *true*).\n  1. Perform _envRec_.InitializeBinding(_N_, _V_).\n  1. Return NormalCompletion(~empty~).",
  "function-declare1.js" : true,
  "function1.js" : "[YET] If Type(_func_) is Object and _func_ has a [[SourceText]] internal slot and _func_.[[SourceText]] is a sequence of Unicode code points and ! HostHasSourceTextAvailable(_func_) is *true*, then\n  1. Return ! CodePointsToString(_func_.[[SourceText]]).",
  "function2.js" : false,
  "function3.js" : false,
  "generator1.js" : "[YET] Assert: _intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.",
  "generator2.js" : "[YET] Assert: _intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.",
  "global-eval.js" : false,
  "global-object.js" : true,
  "global-object2.js" : "[YET] If NewTarget is neither *undefined* nor the active function, then\n  1. Return ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).",
  "global.js" : true,
  "harness.js" : false,
  "if-statement1.js" : true,
  "increment1.js" : true,
  "increment2.js" : "[YET] Return the result of negating _x_; that is, compute a Number with the same magnitude but opposite sign.",
  "instanceof1.js" : true,
  "instanceof2.js" : "[YET] Assert: _intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.",
  "multiple-statements.js" : true,
  "number1.js" : true,
  "number2.js" : "[YET] Return the String representation of this Number value using the radix specified by _radixMV_. Letters `a`-`z` are used for digits with values 10 through 35. The precise algorithm is implementation-defined, however the algorithm should be a generalization of that specified in <emu-xref href=\"#sec-numeric-types-number-tostring\"></emu-xref>.",
  "number3.js" : "[YET] Let _result_ be the Completion Record that is the result of evaluating _F_ in a manner that conforms to the specification of _F_. The *this* value is uninitialized, _argumentsList_ provides the named parameters, and _newTarget_ provides the NewTarget value.",
  "number4.js" : "[YET] Return the result of negating _x_; that is, compute a Number with the same magnitude but opposite sign.",
  "object1.js" : "[YET] If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n  1. Let _isProtoSetter_ be *false*.",
  "object2.js" : "[YET] If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n  1. Let _isProtoSetter_ be *false*.",
  "promise1.js" : "[YET] Let _result_ be the Completion Record that is the result of evaluating _F_ in a manner that conforms to the specification of _F_. The *this* value is uninitialized, _argumentsList_ provides the named parameters, and _newTarget_ provides the NewTarget value.",
  "read-property1.js" : true,
  "semicolon-insertion1.js" : "[YET] If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n  1. Let _isProtoSetter_ be *false*.",
  "semicolon-insertion2.js" : true,
  "semicolon-insertion3.js" : true,
  "set1.js" : false,
  "shift1.js" : "[YET] Let _int_ be the mathematical value whose sign is the sign of _number_ and whose magnitude is floor(abs(ℝ(_number_))).",
  "string1.js" : "[YET] If _x_ and _y_ are exactly the same sequence of code units (same length and same code units at corresponding indices), return *true*; otherwise, return *false*.",
  "string2.js" : "[YET] Let _result_ be the Completion Record that is the result of evaluating _F_ in a manner that conforms to the specification of _F_. The *this* value is uninitialized, _argumentsList_ provides the named parameters, and _newTarget_ provides the NewTarget value.",
  "string3.js" : true,
  "switch1.js" : "[YET] Let _A_ be the List of |CaseClause| items in the first |CaseClauses|, in source text order.",
  "symbol1.js" : false,
  "symbol2.js" : "[YET] If NewTarget is neither *undefined* nor the active function, then\n  1. Return ? OrdinaryCreateFromConstructor(NewTarget, *\"%Object.prototype%\"*).",
  "symbol3.js" : "[YET] Return a new unique Symbol value whose [[Description]] value is _descString_.",
  "template1.js" : "[YET] If this |PropertyDefinition| is contained within a |Script| that is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-eval\"></emu-xref> of <emu-xref href=\"#sec-json.parse\">JSON.parse</emu-xref>), then\n  1. Let _isProtoSetter_ be *false*.",
  "template2.js" : false,
  "try1.js" : false,
  "try2.js" : "[YET] If |BooleanLiteral| is the token `false`, return *false*.",
  "typeof1.js" : "[YET] Return a String according to <emu-xref href=\"#table-typeof-operator-results\"></emu-xref>.",
  "variable-declare1.js" : true,
  "variable-declare2.js" : true,
  "variable-declare3.js" : true,
  "variable-declare4.js" : true
}

@main 0: f(x: any) {
  0: <entry> -> 1
  1: {
    let nx = 1.2f
    let ny = 2.0f
    let nz = 59.0f
    let x = 3
    let y = 5
    let z = 1
    let bx = 1n
    let by = 2n
    let sx = "a"
    let sy = "bc"

    // math values
    assert (= (+ x y) 8)
    assert (= (- x y) -2)
    assert (= (* x y) 15)
    assert (= (** x y) 243)
    assert (= (/ x y) 0.6)
    assert (= (% y x) 2)
    assert (= (%% y x) 2)

    // numbers
    assert (= (+ nx ny) 3.2f)
    assert (= (- nx ny) -0.8f)
    assert (= (* nx ny) 2.4f)
    assert (= (** nx ny) 1.44f)
    assert (= (/ nx ny) 0.6f)
    assert (= (% ny nx) 0.8f)
    assert (= (%% ny nx) 0.8f)

    // math values with numbers
    assert (= (+ x ny) 5.0f)
    assert (= (- x ny) 1.0f)
    assert (= (* x ny) 6.0f)
    assert (= (** x ny) 9.0f)
    assert (= (/ x ny) 1.5f)
    assert (= (% y nx) 0.20000000000000018f)
    assert (= (%% y nx) 0.20000000000000018f)
    assert (= (+ nx y) 6.2f)
    assert (= (- nx y) -3.8f)
    assert (= (* nx y) 6.0f)
    assert (= (** nx y) 2.4883199999999994f)
    assert (= (/ nx y) 0.24f)
    assert (= (% ny x) 2.0f)
    assert (= (%% ny x) 2.0f)

    // strings
    assert (= (+ sx sy) "abc")
    assert (= (+ sx nz) "a;")
    assert (= (- sy z) "b")

    // big integers
    assert (= (+ bx by) 3n)
    assert (= (- bx by) -1n)
    assert (= (* bx by) 2n)
    assert (= (** bx by) 1n)
    assert (= (/ bx by) 0n)
    assert (= (% by bx) 0n)
    assert (= (%% by bx) 0n)

    // big integers with other numeric values
    assert (= (- bx y) -4n)
    assert (= (%% bx y) 1n)
    assert (= (** by y) 32n)
    assert (= (** by ny) 4n)
  } -> 2
  2: <exit>
}

0: @main f(x: any) {
  1: {
    // objects
    let x = (new A())[#1]
    let y = x
    let z = (new A())[#1]
    assert (= x y)
    assert (! (= x z)) // because `x` and `z` have point to different addresses
    // ASTs
    let ast1 = |A|<1, 2>()
    let ast2 = ast1
    let ast3 = |A|<1, 2>()
    let ast4 = |A|("abc")
    assert (= ast1 ast2)
    assert (! (= ast1 ast3))
    assert (= ast4 ast4)
    // closures
    assert (= clo[1] clo[1])
    assert (! (= clo[1] clo[2])) // because different fids
    let a = 0
    let clo1 = clo[1](a)
    let clo2 = clo[1](a)
    assert (= clo1 clo2)
    a = 1
    let clo3 = clo[1](a)
    assert (! (= clo1 clo3)) // becuase `a` points to 0 in clo1 but 1 in clo3
    // continuations
    assert (= cont[1] cont[1])
    let cont1 = cont[1]
    let cont2 = cont[1]
    assert (! (= cont1 cont2))  // because cont2 captures variable `cont1`
    // math values
    assert (= 2.4 2.4)
    assert (! (= 2.4 3))
    // numbers (IEEE 754-2019 double-precision floating point values)
    assert (= 4.2f 4.2f)
    assert (! (= 4.2f 4f))
    // big integers
    assert (= 1111111111n 1111111111n)
    assert (! (= 1111111111n 234234))
    // strings
    assert (= "" "")
    assert (= "abc" "abc")
    assert (! (= "abc" "xyz"))
    // booleans
    assert (= true true)
    assert (= false false)
    assert (! (= true false))
    assert (! (= false true))
    // null
    assert (= null null)
    // undefined
    assert (= undefined undefined)
    // constants
    assert (= ~empty~ ~empty~)
    assert (! (= ~empty~ ~normal~))
  }
}

1: g() { }

2: h() { }

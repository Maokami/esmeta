def ToString(argument: Any) {
  if (= (typeof argument) @Undefined) return "undefined" else {}
  if (= (typeof argument) @Null) return "null" else {}
  if (= (typeof argument) @Boolean) {
    if (= argument true) return "true" else return "false"
  } else {}
  if (= (typeof argument) @Number) {
    call %0 = clo<Number::toString>(argument)
    return [! %0]
  } else {}
  if (= (typeof argument) @String) return argument else {}
  if (= (typeof argument) @Symbol) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @CONTEXT.Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
  } else {}
  if (= (typeof argument) @BigInt) {
    call %1 = clo<BigInt::toString>(argument)
    return [! %1]
  } else {}
  if (= (typeof argument) @Object) {
    call %2 = clo<ToPrimitive>(argument, ~string~)
    let primValue = [? %2]
    call %3 = clo<ToString>(primValue)
    return [? %3]
  } else {}
  assert false
}

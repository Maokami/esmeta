def ToNumber(argument: Any) {
  if (= (typeof argument) @Undefined) return NaN else {}
  if (= (typeof argument) @Null) return 0.0f else {}
  if (= (typeof argument) @Boolean) if argument return 1.0f else return 0.0f else{}
  if (= (typeof argument) @Number) return argument else {}
  if (= (typeof argument) @String) {
    // TODO handle CodePointAt
    // call %0 = clo<StringToNumber>(argument)
    // return [! %0]
    return ([number] argument)
  } else {}
  if (= (typeof argument) @Symbol) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
  } else {}
  if (= (typeof argument) @BigInt) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
  } else {}
  if (= (typeof argument) @Object) {
    call %1 = clo<ToPrimitive>(argument, ~number~)
    let primValue = [? %1]
    call %2 = clo<ToNumber>(primValue)
    return [? %2]
  } else {}
  assert false
}
